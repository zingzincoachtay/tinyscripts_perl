#!/usr/bin/perl -w
use strict;
require "ldperl.pl";

if( !check_argc_exit($#ARGV) ){
  print "Only exactly two folders must be given to the arguments.\n"
  print "./diff2  [FOLDER_FROM] [FOLDER_TO] \n"
  exit;
}

switch_methods(@ARGV);

sub check_argc_exit {
  return ($_[0]==2) ? 1 : 0;
}
sub switch_methods {
  my ($target_from,$likely_to) = @_;
  if(-f $target_from && -f $likely_to){
    print 'Recommend  `diff -q "'.$target_from.'" "'.$likely_to.'"`'."\n" && exit;
  }
  if(-d $target_from && -f $likely_to){
    print 'Running as  `./$0 "'.$likely_to.'" "'.$target_from.'"`'."\n";
    ($target_from,$likely_to) = ($likely_to,$target_from);
  }
  #one-file to one-folder
  if(-f $target_from && -d $likely_to){
    file_to_folder($target_from , $likely_to);
  }
  #one-folder to one-folder is EQUAL to EACH-file to one-folder
  if(-d $target_from && -d $likely_to){
    folder_to_folder($target_from , $likely_to);
  }
  return 1;
}
sub file_to_folder {
  my ($obj,$dest) = @_;
  my $withthese = openRecursiveGenieByFilenames({'f'=>[$obj],'d'=>[$dest]});
  my $bestlikelihood = finalScoreGenie({'f'=>$obj,'all'=>$withthese},{});
  # those -> $this
  execGenie($bestlikelihood);
  return 1;
}
sub openRecursiveGenieByFilenames {
  my ($session) = @_;
  while(my $lookupdir = shift @{$session->{'d'}}){
    $files_uD = crawler($lookupdir,[],[]);
  }
  return $files_uD;
}
sub crawler {
  my ($d,$fnr,$dnr) = @_;
  opendir(my $dh,$d) || die "Can't opendir $d: $!";
  #my @files,@dirs;
  while (readdir $dh) {
    push(@$fnr,"$d/$_")  if -f "$d/$_";
    push(@$dnr,"$d/$_/") if -d "$d/$_";
  }
  closedir $dh;
  if( shift @$dnr ){return crawler($_,$fnr,$dnr);}
  return $fnr;
}
sub finalScoreGenie {
  my ($h,$scoreSheet) = @_;
  my ($f,$all) = ($h->{'f'},$h->{'all'});
  $scoreSheet->{$_} = [$f,1] foreach existsFileSomewhere($f,keys %$all);
  return $scoreSheet;
}
sub existsFileSomewhere {
  my $this = shift @_;
  my @isFound;
  push(@isFound,$_) if /$this/ foreach @_;
  return @isFound;
}
sub execGenie {
  my ($compare) = @_;
  while( my($k,$v)=each(%$compare) ){
    print `diff -sq "$v" "$k" `;
  }
  return 1;
}


sub folder_to_folder {
  my ($dest1,$dest2) = @_;
  my $withthese = openRecursiveGenieByFilenames({'f'=>[],'d'=>[$dest1]});
  file_to_folder($_,$dest2) if -f $_ foreach keys %$withthese;
  return 1;
}
